from dotenv import load_dotenv
import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    CommandHandler,
    CallbackQueryHandler,
    Application,
    ContextTypes,
    ConversationHandler,
    MessageHandler,
    filters,
)
from Load import load_client_data

WAITING_FOR_ARTICLES = 1

load_dotenv()
token = os.getenv("BOT_API_TOKEN")


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(
        "–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –í –¥–∞–Ω–Ω–æ–º –ë–æ—Ç–µ –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ü–µ–Ω—É –Ω–∞ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ –í–∞—Å —Ç–æ–≤–∞—Ä—ã WB."
    )
    chat_id = update.message.chat_id
    username = update.message.chat.username
    load_client_data(str(chat_id), username)
    await show_option_buttons(update, context)


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text("–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...")


async def show_option_buttons(
    update: Update, context: ContextTypes.DEFAULT_TYPE
) -> None:
    keyboard = [
        [
            InlineKeyboardButton(
                "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –∞—Ä—Ç–∏–∫—É–ª–æ–≤", callback_data="button_1"
            )
        ],
        [
            InlineKeyboardButton(
                "–£–≤–∏–¥–µ—Ç—å —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –∞—Ä—Ç–∏–∫—É–ª–æ–≤", callback_data="button_2"
            )
        ],
        [InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –∞—Ä—Ç–∏–∫—É–ª—ã –∫ —Å–ø–∏—Å–∫—É", callback_data="button_3")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", reply_markup=reply_markup)


async def handle_generate_list(update, context):
    await update.callback_query.answer()
    await update.callback_query.edit_message_text(
        "–ù–∞–ø–∏—à–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏—Ö –í–∞—Å –∞—Ä—Ç–∏–∫—É–ª–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 1111111,22222222,333333333 –∏ —Ç. –¥."
    )


async def handle_show_list(update, context):
    await update.callback_query.answer()
    await update.callback_query.edit_message_text("–¢–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –∞—Ä—Ç–∏–∫—É–ª–æ–≤:")


async def handle_add_articles(update, context):
    await update.callback_query.answer()
    await update.callback_query.edit_message_text("–î–æ–±–∞–≤–ª—è–µ–º –∞—Ä—Ç–∏–∫—É–ª—ã –∫ —Å–ø–∏—Å–∫—É...")


async def receive_articles(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text

    articles = [
        a.strip() for a in text.replace(",", " ").split() if a.strip().isdigit()
    ]

    if not articles:
        await update.message.reply_text(
            "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –∞—Ä—Ç–∏–∫—É–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑."
        )
        return WAITING_FOR_ARTICLES

    # üíæ –¢—É—Ç –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞—Ä—Ç–∏–∫—É–ª—ã –≤ –ë–î
    await update.message.reply_text(
        f"–ü–æ–ª—É—á–µ–Ω–æ {len(articles)} –∞—Ä—Ç–∏–∫—É–ª–æ–≤. –¢–µ–ø–µ—Ä—å –æ–Ω–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—é—Ç—Å—è:\n\n{', '.join(articles)}"
    )
    return ConversationHandler.END


conv_handler = ConversationHandler(
    entry_points=[CallbackQueryHandler(handle_generate_list, pattern="^button_1$")],
    states={
        WAITING_FOR_ARTICLES: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, receive_articles)
        ]
    },
    fallbacks=[],
)


def main():
    application = Application.builder().token(token).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))

    # –û–ø—Ü–∏–∏

    application.add_handler(
        CallbackQueryHandler(handle_show_list, pattern="^button_2$")
    )
    application.add_handler(
        CallbackQueryHandler(handle_add_articles, pattern="^button_3$")
    )
    application.add_handler(conv_handler)

    application.run_polling()


if __name__ == "__main__":
    main()
